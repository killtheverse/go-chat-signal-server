package model

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/go-playground/validator"
	"github.com/go-playground/validator/v10"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// User represents a user.
// User has a username, a name and a password all of which are required.
// Apart from them, a user will also contain the date and time the user registered, and an id which will be autogenerated by the server.
type User struct {
    // Id of the user
    ID              primitive.ObjectID  `json:"id" bson:_id"`

    // Username of the user
    Username        string              `json:"username" bson:"username" validate:"required,alphanum,min=4,max=100"`

    // Password of the User
    Password        string              `json:"password" bson:"password" validate:"required,min=8,max=100`

    // Name of the User
    Name            string              `json:"name" bson:"name" validate:"required,min=4,max=100"`

    // Date and Time the user registered
    TimeCreated     time.Time           `json:"timeCreated" bson:"timeCreated"`
}


// MarshalJSON is for custom JSON encoding. User password is ignored when encoding to JSON.
func (u *User) MarshalJSON() ([]byte, error) {
    var tmp struct {
        Username        string      `json:"username"`
        Name            string      `json:"name"`
        TimeCreated     time.Time   `json:"timeCreated"`
    }
    tmp.Username = u.Username
    tmp.Name = u.Name
    tmp.TimeCreated = u.TimeCreated
    return json.Marshal(&tmp)
}

// Validate validates a user and returns an error if validation fails
func (u User) Validate() error {
    // Validate the user
    validate := validator.New()
    err := validate.Struct(u)
    if err != nil {
        var validationError error
        // Iterate through all the errors
        for _, fe := range err.(validator.ValidationErrors) {
            var errorMessage string
            // Write custom message depending on the tag
            switch fe.Tag() {
            case "required":
                errorMessage = fmt.Sprintf("%s is required", fe.Field())
            case "min":
                errorMessage = fmt.Sprintf("Length of %s should be atleast %s", fe.Field(), fe.Param())
            case "max":
                errorMessage = fmt.Sprintf("Length of %s should be atleast %s", fe.Field(), fe.Param())
            }
            if validationError == nil {
                validationError = errors.New(errorMessage)
            } else {
                validationError = fmt.Errorf("%v. %v", validationError, errorMessage)
            }
        }
        return validationError
    }
    return nil
}

